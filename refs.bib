@techreport{LoCal-tr,
  author =        {Michael Vollmer and Chaitanya Koparkar and and Mike Rainey and Laith Sakka and Milind Kulkarni and Ryan R. Newton},
  institution =   {Indiana University},
  note =          {\url{https://help.sice.indiana.edu/techreports/TRNNN.cgi?trnum=TR741}},
  type =          {Technical Report},
  title =         {LoCal: A Language for Programs Operating on Serialized Data},
  year =          {2019},
}

@inproceedings{TAL,
 author = {Morrisett, Greg and Walker, David and Crary, Karl and Glew, Neal},
 title = {From System F to Typed Assembly Language},
 booktitle = {Proceedings of the 25th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
 series = {POPL '98},
 year = {1998},
 isbn = {0-89791-979-3},
 location = {San Diego, California, USA},
 pages = {85--97},
 numpages = {13},
 url = {http://doi.acm.org/10.1145/268946.268954},
 doi = {10.1145/268946.268954},
 acmid = {268954},
 publisher = {ACM},
 address = {New York, NY, USA},
}

@article{regioncalcs,
 author = {Tofte, Mads and Talpin, Jean-Pierre},
 title = {Region-Based Memory Management},
 journal = {Inf. Comput.},
 issue_date = {Feb. 1, 1997},
 volume = {132},
 number = {2},
 month = feb,
 year = {1997},
 issn = {0890-5401},
 pages = {109--176},
 numpages = {68},
 url = {http://dx.doi.org/10.1006/inco.1996.2613},
 doi = {10.1006/inco.1996.2613},
 acmid = {249661},
 publisher = {Academic Press, Inc.},
 address = {Duluth, MN, USA},
}

@book{pltredex,
 author = {Felleisen, Matthias and Findler, Robert Bruce and Flatt, Matthew},
 title = {Semantics Engineering with PLT Redex},
 year = {2009},
 isbn = {0262062755, 9780262062756},
 edition = {1st},
 publisher = {The MIT Press},
} 

@InProceedings{ecoop17-gibbon,
  author =	{Michael Vollmer and Sarah Spall and Buddhika Chamith and Laith Sakka and Chaitanya Koparkar and Milind Kulkarni and Sam Tobin-Hochstadt and Ryan R. Newton},
  title =	{{Compiling Tree Transforms to Operate on Packed Representations}},
  booktitle =	{31st European Conference on Object-Oriented Programming (ECOOP 2017)},
  pages =	{26:1--26:29},
  series =	{Leibniz International Proceedings in Informatics (LIPIcs)},
  ISBN =	{978-3-95977-035-4},
  ISSN =	{1868-8969},
  year =	{2017},
  volume =	{74},
  editor =	{Peter M{\"u}ller},
  publisher =	{Schloss Dagstuhl--Leibniz-Zentrum fuer Informatik},
  address =	{Dagstuhl, Germany},
  URL =		{http://drops.dagstuhl.de/opus/volltexte/2017/7273},
  URN =		{urn:nbn:de:0030-drops-72737},
  doi =		{10.4230/LIPIcs.ECOOP.2017.26},
  annote =	{Keywords: compiler optimization, program transformation, tree traversal}
}

@article{Chilimbi1999,
  author =        {Chilimbi, TM and Hill, MD and Larus, JR},
  journal =       {ACM SIGPLAN Notices},
  title =         {{Cache-conscious structure layout}},
  year =          {1999},
  annote =        {This is the ccmorph paper.},
  url =           {http://dl.acm.org/citation.cfm?id=301633},
}

@misc{capnproto,
  author =        {Varda, Kenton},
  title =         {{Cap'n Proto}},
  year =          {2015},
  url =           {https://capnproto.org/},
}

@inproceedings{cnf-icfp15,
  address =       {New York, NY, USA},
  author =        {Yang, Edward Z. and Campagna, Giovanni and
                   A\u{g}acan, \"{O}mer S. and El-Hassany, Ahmed and
                   Kulkarni, Abhishek and Newton, Ryan R.},
  booktitle =     {Proceedings of the 20th ACM SIGPLAN International
                   Conference on Functional Programming},
  pages =         {362--374},
  publisher =     {ACM},
  series =        {ICFP 2015},
  title =         {Efficient Communication and Collection with Compact
                   Normal Forms},
  year =          {2015},
  doi =           {10.1145/2784731.2784735},
  isbn =          {978-1-4503-3669-7},
  url =           {http://doi.acm.org/10.1145/2784731.2784735},
}

@article{mlkit,
  author =        {Mads Tofte and Jean{-}Pierre Talpin},
  journal =       {Inf. Comput.},
  number =        {2},
  pages =         {109--176},
  title =         {Region-based Memory Management},
  volume =        {132},
  year =          {1997},
  biburl =        {http://dblp.uni-trier.de/rec/bib/journals/iandc/TofteT97},
}

@article{Lattner2005,
  author =        {Lattner, Chris and Adve, Vikram},
  journal =       {ACM SIGPLAN Notices},
  pages =         {129--142},
  title =         {{Automatic pool allocation: improving performance by
                   controlling data structure layout in the heap}},
  volume =        {40},
  year =          {2005},
  abstract =      {This paper describes Automatic Pool Allocation, a
                   transformation framework that segregates distinct
                   instances of heap-based data structures into seperate
                   memory pools and allows heuristics to be used to
                   partially control the internal layout of those data
                   structures. The primary goal of this work is
                   performance improvement, not automatic memory
                   management, and the paper makes several new
                   contributions. The key contribution is a new compiler
                   algorithm for partitioning heap objects in imperative
                   programs based on a context-sensitive pointer
                   analysis, including a novel strategy for correct
                   handling of indirect (and potentially unsafe)
                   function calls. The transformation does not require
                   type safe programs and works for the full generality
                   of C and C++. Second, the paper describes several
                   optimizations that exploit data structure
                   partitioning to further improve program performance.
                   Third, the paper evaluates how memory hierarchy
                   behavior and overall program performance are impacted
                   by the new transformations. Using a number of
                   benchmarks and a few applications, we find that
                   compilation times are extremely low, and overall
                   running times for heap intensive programs speed up by
                   10-25\% in many cases, about 2x in two cases, and
                   more than 10x in two small benchmarks. Overall, we
                   believe this work provides a new framework for
                   optimizing pointer intensive programs by segregating
                   and controlling the layout of heap-based data
                   structures.},
  annote =        {Looks very apt. Also a good seed for pulling in the
                   region inference literature. (MLKit being the obvious
                   one)},
  doi =           {10.1145/1065010.1065027},
  isbn =          {1595930566},
  issn =          {0362-1340},
}

@inproceedings{Chilimbi1999b,
  address =       {New York, NY, USA},
  author =        {Chilimbi, Trishul M. and Davidson, Bob and
                   Larus, James R.},
  booktitle =     {Proceedings of the ACM SIGPLAN 1999 conference on
                   Programming language design and implementation},
  pages =         {13--24},
  publisher =     {ACM},
  series =        {PLDI '99},
  title =         {Cache-conscious structure definition},
  year =          {1999},
  doi =           {http://doi.acm.org/10.1145/301618.301635},
  isbn =          {1-58113-094-5},
  url =           {http://doi.acm.org/10.1145/301618.301635},
}

@inproceedings{Truong1998,
  address =       {Washington, DC, USA},
  author =        {Truong, D. N. and Bodin, F. and Seznec, A.},
  booktitle =     {Proceedings of the 1998 International Conference on
                   Parallel Architectures and Compilation Techniques},
  pages =         {322--},
  publisher =     {IEEE Computer Society},
  series =        {PACT '98},
  title =         {Improving Cache Behavior of Dynamically Allocated
                   Data Structures},
  year =          {1998},
  isbn =          {0-8186-8591-3},
  url =           {http://portal.acm.org/citation.cfm?id=522344.825680},
}

@misc{Chilimbi1999a,
  author =        {Chilimbi, Trishul M. and Larus, James R.},
  booktitle =     {ACM SIGPLAN Notices},
  pages =         {37--48},
  title =         {{Using generational garbage collection to implement
                   cache-conscious data placement}},
  volume =        {34},
  year =          {1999},
  abstract =      {Processor and memory technology trends show a
                   continual increase in the cost of accessing main
                   memory. Machine designers have tried to mitigate the
                   effect of this trend through a variety of techniques
                   that attempt to reduce or tolerate memory latency.
                   These techniques, unfortunately, have only been
                   partially successful for pointer- manipulating
                   programs. Recent research has demonstrated that these
                   programs can benefit greatly from the complementary
                   approach of reorganizing pointer data structures to
                   improve cache locality. This paper describes how a
                   generational garbage collector can be used to achieve
                   a cache-conscious data layout, in which objects with
                   high temporal affinity are placed next to each other,
                   so they are likely to reside in the same cache block.
                   The paper demonstrates the feasibility of collecting
                   low overhead, real-time profiling information about
                   data access patterns for object-oriented languages,
                   and describes a new copying algorithm that utilizes
                   this information to produce a cache-conscious object
                   layout. Preliminary results indicate that this
                   technique reduces cache miss rates by
                   21-42$\backslash$\%, and improves program performance
                   by 14-37$\backslash$\%.},
  doi =           {10.1145/301589.286865},
  isbn =          {1-58113-114-3},
  issn =          {03621340},
}

@inproceedings{Lattner2005mspc,
  address =       {New York, NY, USA},
  author =        {Lattner, Chris and Adve, Vikram S.},
  booktitle =     {Proceedings of the 2005 Workshop on Memory System
                   Performance},
  pages =         {24--35},
  publisher =     {ACM},
  series =        {MSP '05},
  title =         {Transparent Pointer Compression for Linked Data
                   Structures},
  year =          {2005},
  doi =           {10.1145/1111583.1111587},
  isbn =          {1-59593-147-3},
  url =           {http://doi.acm.org/10.1145/1111583.1111587},
}

@inproceedings{hsu2016key,
  address =       {New York, NY, USA},
  author =        {Hsu, Aaron W.},
  booktitle =     {{Proceedings of the 3rd ACM SIGPLAN International
                   Workshop on Libraries, Languages, and Compilers for
                   Array Programming}},
  pages =         {32--40},
  publisher =     {ACM},
  series =        {ARRAY 2016},
  title =         {{The Key to a Data Parallel Compiler}},
  year =          {2016},
  doi =           {10.1145/2935323.2935331},
  isbn =          {978-1-4503-4384-8},
  url =           {http://doi.acm.org/10.1145/2935323.2935331},
}

@article{makino90,
  author =        {Makino, Junichiro},
  journal =       {J. Comput. Phys.},
  month =         {March},
  pages =         {148--160},
  title =         {Vectorization of a treecode},
  volume =        {87},
  year =          {1990},
  doi =           {10.1016/0021-9991(90)90231-O},
  issn =          {0021-9991},
  url =           {http://portal.acm.org/citation.cfm?id=78582.78602},
}


@inproceedings{Meyerovich2011,
  address =       {},
  author =        {Meyerovich, Leo A. and Mytkowicz, Todd and
                   Schulte, Wolfram},
  booktitle =     {HotPAR},
  chapter =       {},
  journal =       {},
  month =         {May},
  pages =         {},
  publisher =     {USENIX},
  title =         {Data Parallel Programming for Irregular Tree
                   Computations},
  volume =        {},
  year =          {2011},
  isbn =          {},
  url =           {https://www.microsoft.com/en-us/research/publication/data-
                  parallel-programming-for-irregular-tree-computations/},
}

@inproceedings{ren13cgo,
  author =        {Bin Ren and Gagan Agrawal and James R. Larus and
                   Todd Mytkowicz and Tomi Poutanen and Wolfram Schulte},
  booktitle =     {Proceedings of the 2013 {IEEE/ACM} International
                   Symposium on Code Generation and Optimization, {CGO}
                   2013, Shenzhen, China, February 23-27, 2013},
  pages =         {20:1--20:10},
  publisher =     {{IEEE} Computer Society},
  title =         {{SIMD} parallelization of applications that traverse
                   irregular data structures},
  year =          {2013},
  biburl =        {http://dblp.uni-trier.de/rec/bib/conf/cgo/RenALMPS13},
  doi =           {10.1109/CGO.2013.6494989},
  isbn =          {978-1-4673-5524-7},
  url =           {http://dx.doi.org/10.1109/CGO.2013.6494989},
}

@article{ren14taco,
  author =        {Bin Ren and Todd Mytkowicz and Gagan Agrawal},
  journal =       {{TACO}},
  number =        {2},
  pages =         {16:1--16:31},
  title =         {A Portable Optimization Engine for Accelerating
                   Irregular Data-Traversal Applications on {SIMD}
                   Architectures},
  volume =        {11},
  year =          {2014},
  biburl =        {http://dblp.uni-trier.de/rec/bib/journals/taco/RenMA14},
  doi =           {10.1145/2632215},
  url =           {http://doi.acm.org/10.1145/2632215},
}

@techreport{plt-tr1,
  author =        {Matthew Flatt and PLT},
  institution =   {PLT Design, Inc.},
  note =          {\url{http://racket-lang.org/tr1/}},
  type =          {Technical Report},
  title =         {Reference: Racket},
  year =          {2010},
}

@inproceedings{popl08,
  author =        {Sam Tobin-Hochstadt and Matthias Felleisen},
  booktitle =     {},
  pages =         {395--406},
  title =         {The design and implementation of {Typed} {Scheme}},
  year =          {2008},
}

@phdthesis{larus89,
  author =        {James Larus},
  school =        {University of California at Berkeley},
  title =         {Restructuring Symbolic Programs for Concurrent
                   Execution on Multiprocessors},
  year =          {1989},
}

@inproceedings{urweb-icfp,
  address =       {New York, NY, USA},
  author =        {Chlipala, Adam},
  booktitle =     {Proceedings of the 20th ACM SIGPLAN International
                   Conference on Functional Programming},
  pages =         {10--21},
  publisher =     {ACM},
  series =        {ICFP 2015},
  title =         {An Optimizing Compiler for a Purely Functional
                   Web-application Language},
  year =          {2015},
  doi =           {10.1145/2784731.2784741},
  isbn =          {978-1-4503-3669-7},
  url =           {http://doi.acm.org/10.1145/2784731.2784741},
}

@inproceedings{cyclone-pldi,
  author =        {Grossman, Dan and Morrisett, Greg and Jim, Trevor and
                   Hicks, Michael and Wang, Yanling and Cheney, James},
  booktitle =     {PLDI},
  title =         {{Region-based memory management in Cyclone}},
  year =          {2002},
  isbn =          {1581134630},
  url =           {http://dl.acm.org/citation.cfm?id=512563},
}

@inproceedings{SessionTypesHonda,
  address =       {London, UK, UK},
  author =        {Honda, Kohei and Vasconcelos, Vasco Thudichum and
                   Kubo, Makoto},
  booktitle =     {Proceedings of the 7th European Symposium on
                   Programming: Programming Languages and Systems},
  pages =         {122--138},
  publisher =     {Springer-Verlag},
  series =        {ESOP '98},
  title =         {Language Primitives and Type Discipline for
                   Structured Communication-Based Programming},
  year =          {1998},
  isbn =          {3-540-64302-8},
  url =           {http://dl.acm.org/citation.cfm?id=645392.651876},
}

@inproceedings{accelerate-icfp13,
  author =        {McDonell, Trevor L. and Chakravarty, Manuel M.T. and
                   Keller, Gabriele and Lippmeier, Ben},
  booktitle =     {ICFP: International Conference on Functional
                   Programming},
  pages =         {49--60},
  publisher =     {ACM},
  title =         {Optimising Purely Functional {GPU} Programs},
  year =          {2013},
}

@inproceedings{delite,
  author =        {Brown, Kevin J. and Sujeeth, Arvind K. and
                   Lee, Hyouk Joong and Rompf, Tiark and Chafi, Hassan and
                   Odersky, Martin and Olukotun, Kunle},
  booktitle =     {Proceedings of the 2011 International Conference on
                   Parallel Architectures and Compilation Techniques},
  pages =         {89--100},
  publisher =     {IEEE},
  series =        {PACT '11},
  title =         {A Heterogeneous Parallel Framework for
                   Domain-Specific Languages},
  year =          {2011},
}

@article{obsidian-cacm,
  author =        {Svensson, Bo Joel and Sheeran, Mary and
                   Newton, Ryan R.},
  journal =       {Commun. ACM},
  month =         jun,
  number =        {6},
  pages =         {56--63},
  publisher =     {ACM},
  title =         {Design Exploration Through Code-generating DSLs},
  volume =        {57},
  year =          {2014},
}

@inproceedings{gray2000n,
  author =        {Gray, Alexander G and Moore, Andrew W},
  booktitle =     {NIPS},
  organization =  {Citeseer},
  pages =         {521--527},
  title =         {N-Body'problems in statistical learning},
  volume =        {4},
  year =          {2000},
}

@article{popov07,
  author =        {Stefan Popov and Johannes G{\"u}nther and
                   Hans-Peter Seidel and Philipp Slusallek},
  editor =        {Daniel Cohen-Or and Pavel Slav{\'\i}k},
  journal =       {Computer Graphics Forum},
  month =         sep,
  note =          {(Proceedings of Eurographics)},
  number =        {3},
  pages =         {415--424},
  title =         {Stackless KD-Tree Traversal for High Performance
                   {GPU} Ray Tracing},
  volume =        {26},
  year =          {2007},
}

@inproceedings{hapala11,
  author =        {Michael Hapala and Tomas Davidovic and Ingo Wald and
                   Vlastimil Havran and Philipp Slusallek},
  booktitle =     {{Proceedings} {27th} {Spring} {Conference} {of}
                   {Computer} {Graphics} {(SCCG)} {2011}},
  pages =         {29--34},
  title =         {{Efficient} {Stack-less} {BVH} {Traversal} {for}
                   {Ray} {Tracing}},
  year =          {2011},
}

@article{cilk,
  address =       {New York, NY, USA},
  author =        {Blumofe, Robert D. and Joerg, Christopher F. and
                   Kuszmaul, Bradley C. and Leiserson, Charles E. and
                   Randall, Keith H. and Zhou, Yuli},
  journal =       {SIGPLAN Notices},
  month =         {August},
  pages =         {207--216},
  publisher =     {ACM},
  title =         {Cilk: an efficient multithreaded runtime system},
  volume =        {30},
  year =          {1995},
  doi =           {http://doi.acm.org/10.1145/209937.209958},
  issn =          {0362-1340},
  url =           {http://doi.acm.org/10.1145/209937.209958},
}

@article{bentley75,
  author =        {Bentley, Jon Louis},
  journal =       {Commun. ACM},
  month =         {September},
  pages =         {509--517},
  title =         {Multidimensional binary search trees used for
                   associative searching},
  volume =        {18},
  year =          {1975},
  doi =           {http://doi.acm.org/10.1145/361002.361007},
  issn =          {0001-0782},
  url =           {http://doi.acm.org/10.1145/361002.361007},
}

@proceedings{DBLP:conf/cgo/2013,
  publisher =     {{IEEE} Computer Society},
  title =         {Proceedings of the 2013 {IEEE/ACM} International
                   Symposium on Code Generation and Optimization, {CGO}
                   2013, Shenzhen, China, February 23-27, 2013},
  year =          {2013},
  biburl =        {http://dblp.uni-trier.de/rec/bib/conf/cgo/2013},
  isbn =          {978-1-4673-5524-7},
  url =           {http://ieeexplore.ieee.org/xpl/mostRecentIssue.jsp?
                  punumber=6489844},
}

@article{mlkit-retrospective,
 author = {Tofte, Mads and Birkedal, Lars and Elsman, Martin and Hallenberg, Niels},
 title = {A Retrospective on Region-Based Memory Management},
 journal = {Higher Order Symbol. Comput.},
 issue_date = {September 2004},
 volume = {17},
 number = {3},
 month = sep,
 year = {2004},
 issn = {1388-3690},
 pages = {245--265},
 numpages = {21},
 url = {https://doi.org/10.1023/B:LISP.0000029446.78563.a4},
 doi = {10.1023/B:LISP.0000029446.78563.a4},
 acmid = {993040},
 publisher = {Kluwer Academic Publishers},
 address = {Hingham, MA, USA},
 keywords = {Standard ML, dynamic storage management, regions},
}


@inproceedings{repmax-Meyerovich,
author = {Meyerovich, Leo A. and Mytkowicz, Todd and Schulte, Wolfram},
title = {Data Parallel Programming for Irregular Tree Computations},
booktitle = {HotPAR},
year = {2011},
month = {May},
publisher = {USENIX},
url = {https://www.microsoft.com/en-us/research/publication/data-parallel-programming-for-irregular-tree-computations/},
address = {},
pages = {},
journal = {},
volume = {},
chapter = {},
isbn = {},
}

@article{repmax-Bird,
 author = {Bird, R. S.},
 title = {Using Circular Programs to Eliminate Multiple Traversals of Data},
 journal = {Acta Inf.},
 issue_date = {October   1984},
 volume = {21},
 number = {3},
 month = oct,
 year = {1984},
 issn = {0001-5903},
 pages = {239--250},
 numpages = {12},
 url = {http://dx.doi.org/10.1007/BF00264249},
 doi = {10.1007/BF00264249},
 acmid = {2697826},
 publisher = {Springer-Verlag New York, Inc.},
 address = {Secaucus, NJ, USA},
}

@inproceedings{destination-passing,
 author = {Shaikhha, Amir and Fitzgibbon, Andrew and Peyton Jones, Simon and Vytiniotis, Dimitrios},
 title = {Destination-passing Style for Efficient Memory Management},
 booktitle = {Proceedings of the 6th ACM SIGPLAN International Workshop on Functional High-Performance Computing},
 series = {FHPC 2017},
 year = {2017},
 isbn = {978-1-4503-5181-2},
 location = {Oxford, UK},
 pages = {12--23},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/3122948.3122949},
 doi = {10.1145/3122948.3122949},
 acmid = {3122949},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Array Programming, Destination-Passing Style},
} 

@article{linear-haskell,
 author = {Bernardy, Jean-Philippe and Boespflug, Mathieu and Newton, Ryan R. and Peyton Jones, Simon and Spiwack, Arnaud},
 title = {Linear Haskell: Practical Linearity in a Higher-order Polymorphic Language},
 journal = {Proc. ACM Program. Lang.},
 issue_date = {January 2018},
 volume = {2},
 number = {POPL},
 month = dec,
 year = {2017},
 issn = {2475-1421},
 pages = {5:1--5:29},
 articleno = {5},
 numpages = {29},
 url = {http://doi.acm.org/10.1145/3158093},
 doi = {10.1145/3158093},
 acmid = {3158093},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {GHC, Haskell, laziness, linear logic, linear types, polymorphism, typestate},
} 


@inproceedings{xpath-streams,
 author = {Mozafari, Barzan and Zeng, Kai and Zaniolo, Carlo},
 title = {High-performance Complex Event Processing over XML Streams},
 booktitle = {Proceedings of the 2012 ACM SIGMOD International Conference on Management of Data},
 series = {SIGMOD '12},
 year = {2012},
 isbn = {978-1-4503-1247-9},
 location = {Scottsdale, Arizona, USA},
 pages = {253--264},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2213836.2213866},
 doi = {10.1145/2213836.2213866},
 acmid = {2213866},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {complex event processing, visibly pushdown automata, xml},
}

@inproceedings{wavescript-nsdi,
 author = {Newton, Ryan R. and Toledo, Sivan and Girod, Lewis and Balakrishnan, Hari and Madden, Samuel},
 title = {Wishbone: {P}rofile-based partitioning for sensornet applications},
 booktitle = {Symposium on Networked Systems Design and Implementation},
 year = {2009},
 publisher = {USENIX Association},
 series = {NSDI'09},
 pages = {395--408},
}

@inproceedings{streamit,
 author = {Thies, William and Karczmarek, Michal and Amarasinghe, Saman P.},
 title = {StreamIt: A Language for Streaming Applications},
 booktitle = {International Conference on Compiler Construction},
 year = {2002},
 publisher = {Springer-Verlag},
}

@inproceedings{ wadler-deforestation,
    author = "P. Wadler",
    title = {Deforestation: Transforming Programs to Eliminate Trees},
    booktitle = "European Symposium on Programming",
    publisher = "Berlin:\ Springer-Verlag",
    pages = "344--358",
    year = "1988",
    url = "citeseer.ist.psu.edu/wadler90deforestation.html" }
    

@inproceedings{stream-fusion,
author = {Coutts, Duncan and Leshchinskiy, Roman and Stewart, Don},
title = {{Stream fusion: from lists to streams to nothing at all}},
booktitle = {ICFP: International Conference on Functional Programming},
year = {2007},
publisher = {ACM},
}
pages = {315--326},
address = {New York, NY, USA}


@article{ornament-ml,
 author = {Williams, Thomas and R{\'e}my, Didier},
 title = {A Principled Approach to Ornamentation in ML},
 journal = {Proc. ACM Program. Lang.},
 issue_date = {January 2018},
 volume = {2},
 number = {POPL},
 month = dec,
 year = {2017},
 issn = {2475-1421},
 pages = {21:1--21:30},
 articleno = {21},
 numpages = {30},
 url = {http://doi.acm.org/10.1145/3158109},
 doi = {10.1145/3158109},
 acmid = {3158109},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Dependent Types, Logical Relations, ML, Ornaments, Refactoring},
}

@article{ornaments,
  title={Ornamental algebras, algebraic ornaments},
  author={McBride, Conor},
  journal={Journal of functional programming},
  year={2010}
}

@article{persistent-java,
 author = {Atkinson, M. P. and Dayn\`{e}s, L. and Jordan, M. J. and Printezis, T. and Spence, S.},
 title = {An Orthogonally Persistent Java},
 journal = {SIGMOD Rec.},
 issue_date = {Dec. 1996},
 volume = {25},
 number = {4},
 month = dec,
 year = {1996},
 issn = {0163-5808},
 pages = {68--75},
 numpages = {8},
 url = {http://doi.acm.org/10.1145/245882.245905},
 doi = {10.1145/245882.245905},
 acmid = {245905},
 publisher = {ACM},
 address = {New York, NY, USA},
}

@article{persistent-object-systems,
 author = {Atkinson, Malcolm and Morrison, Ronald},
 title = {Orthogonally Persistent Object Systems},
 journal = {The VLDB Journal},
 issue_date = {July 1995},
 volume = {4},
 number = {3},
 month = jul,
 year = {1995},
 issn = {1066-8888},
 pages = {319--402},
 numpages = {84},
 url = {http://dl.acm.org/citation.cfm?id=615224.615226},
 acmid = {615226},
 publisher = {Springer-Verlag New York, Inc.},
 address = {Secaucus, NJ, USA},
 keywords = {database programming languages, orthogonal persistence, persistent application systems, persistent programming languages},
}

@inproceedings{persistent-objects-thor,
 author = {Liskov, B. and Adya, A. and Castro, M. and Ghemawat, S. and Gruber, R. and Maheshwari, U. and Myers, A. C. and Day, M. and Shrira, L.},
 title = {Safe and Efficient Sharing of Persistent Objects in Thor},
 booktitle = {Proceedings of the 1996 ACM SIGMOD International Conference on Management of Data},
 series = {SIGMOD '96},
 year = {1996},
 isbn = {0-89791-794-4},
 location = {Montreal, Quebec, Canada},
 pages = {318--329},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/233269.233346},
 doi = {10.1145/233269.233346},
 acmid = {233346},
 publisher = {ACM},
 address = {New York, NY, USA},
}

@Inbook{Napier88,
author="Morrison, Ron
and Connor, Richard
and Kirby, Graham
and Munro, David
and Atkinson, Malcolm P.
and Cutts, Quintin
and Brown, Fred
and Dearie, Alan",
editor="Atkinson, Malcolm P.
and Welland, Ray",
title="The Napier88 Persistent Programming Language and Environment",
bookTitle="Fully Integrated Data Environments: Persistent Programming Languages, Object Stores, and Programming Environments",
year="2000",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="98--154",
abstract="Persistent programming systems are designed as an implementation technology for long lived, concurrently accessed and potentially large bodies of data and programs, known here as persistent application systems (PASs). Within a PAS the persistence concept is used to abstract over the physical properties of data such as where it is kept, how long it is kept and in what form it is kept. As such it is seen as having a number of benefits in simplifying the task of PAS programming. Here, we describe the integrated design of the Napier88 persistent programming system and how Napier88 may be used to develop PASs.",
isbn="978-3-642-59623-0",
doi="10.1007/978-3-642-59623-0_6",
url="https://doi.org/10.1007/978-3-642-59623-0_6"
}


@inproceedings{object-fault-handling,
 author = {Hosking, Antony L. and Moss, J. Eliot B.},
 title = {Object Fault Handling for Persistent Programming Languages: A Performance Evaluation},
 booktitle = {Proceedings of the Eighth Annual Conference on Object-oriented Programming Systems, Languages, and Applications},
 series = {OOPSLA '93},
 year = {1993},
 isbn = {0-89791-587-9},
 location = {Washington, D.C., USA},
 pages = {288--303},
 numpages = {16},
 url = {http://doi.acm.org/10.1145/165854.165907},
 doi = {10.1145/165854.165907},
 acmid = {165907},
 publisher = {ACM},
 address = {New York, NY, USA},
}

@techreport{local-extended,
  author      = "Michael Vollmer and Chaitanya Koparkar and Mike Rainey and Laith Sakka and Milind Kulkarni and Ryan R. Newton",
  title       = "Technical Report TR741: LoCal: A Language for Programs Operating on Serialized Data",
  institution = "Indiana University",
  year        = "2019"
}
@inproceedings{effect-types,
author = {Lucassen, J. M. and Gifford, D. K.},
title = {Polymorphic Effect Systems},
year = {1988},
isbn = {0897912527},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/73560.73564},
doi = {10.1145/73560.73564},
abstract = {We present a new approach to programming languages for parallel computers that uses an effect system to discover expression scheduling constraints. This effect system is part of a 'kinded' type system with three base kinds: types, which describe the value that an expression may return; effects, which describe the side-effects that an expression may have; and regions, which describe the area of the store in which side-effects may occur. Types, effects and regions are collectively called descriptions.Expressions can be abstracted over any kind of description variable -- this permits type, effect and region polymorphism. Unobservable side-effects can be masked by the effect system; an effect soundness property guarantees that the effects computed statically by the effect system are a conservative approximation of the actual side-effects that a given expression may have.The effect system we describe performs certain kinds of side-effect analysis that were not previously feasible. Experimental data from the programming language FX indicate that an effect system can be used effectively to compile programs for parallel computers.},
booktitle = {Proceedings of the 15th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages},
pages = {47–57},
numpages = {11},
location = {San Diego, California, USA},
series = {POPL '88}
}
@INPROCEEDINGS{wadler-linear-types,
    author = {Philip Wadler},
    title = {Linear Types Can Change the World!},
    booktitle = {PROGRAMMING CONCEPTS AND METHODS},
    year = {1990},
    publisher = {North}
}
@inproceedings{inproceedings,
author = {Hamilton, Geoff and Jones, S.},
year = {1991},
month = {01},
pages = {182-188},
title = {Transforming Programs to Eliminate Intermediate Structures.}
}
@inproceedings{flattening-trees,
author="Keller, Gabriele
and Chakravarty, Manuel M. T.",
editor="Pritchard, David
and Reeve, Jeff",
title="Flattening trees",
booktitle="Euro-Par'98 Parallel Processing",
year="1998",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="709--719",
abstract="Nested data-parallelism can be efficiently implemented by mapping it to flat parallelism using Blelloch {\&} Sabot's flattening transformation. So far, the only dynamic data structure supported by flattening are vectors. We extend it with support for user-defined recursive types, which allow parallel tree structures to be defined. Thus, important parallel algorithms can be implemented more clearly and efficiently.",
isbn="978-3-540-49920-6"
}
@inproceedings{data-parallel-haskell,
author = {Chakravarty, Manuel M. T. and Leshchinskiy, Roman and Peyton Jones, Simon and Keller, Gabriele and Marlow, Simon},
title = {Data Parallel Haskell: A Status Report},
year = {2007},
isbn = {9781595936905},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1248648.1248652},
doi = {10.1145/1248648.1248652},
abstract = {We describe the design and current status of our effort to implement the programming model of nested data parallelism into the Glasgow Haskell Compiler. We extended the original programming model and its implementation, both of which were first popularised by the NESL language, in terms of expressiveness as well as efficiency. Our current aim is to provide a convenient programming environment for SMP parallelism, and especially multicore architectures. Preliminary benchmarks show that we are, at least for some programs, able to achieve good absolute performance and excellent speedups.},
booktitle = {Proceedings of the 2007 Workshop on Declarative Aspects of Multicore Programming},
pages = {10–18},
numpages = {9},
location = {Nice, France},
series = {DAMP '07}
}
@inproceedings{nested-data-parallelism,
author = {Blelloch, Guy E. and Hardwick, Jonathan C. and Chatterjee, Siddhartha and Sipelstein, Jay and Zagha, Marco},
title = {Implementation of a Portable Nested Data-Parallel Language},
year = {1993},
isbn = {0897915895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/155332.155343},
doi = {10.1145/155332.155343},
abstract = {This paper gives an overview of the implementation of NESL, a portable nested data-parallel language. This language and its implementation are the first to fully support nested data structures as well as nested data-parallel function calls. These features allow the concise description of parallel algorithms on irregular data, such as sparse matrices and graphs. In addition, they maintain the advantages of data-parallel languages: a simple programming model and portability. The current NESL implementation is based on an intermediate language called VCODE and a library of vector routines called CVL. It runs on the Connection Machine CM-2, the Cray Y-MP C90, and serial machines. We compare initial benchmark results of NESL with those of machine-specific code on these machines for three algorithms: least-squares line-fitting, median finding, and a sparse-matrix vector product. These results show that NESL's performance is competitive with that of machine-specific codes for regular dense data, and is often superior for irregular data.},
booktitle = {Proceedings of the Fourth ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming},
pages = {102–111},
numpages = {10},
location = {San Diego, California, USA},
series = {PPOPP '93}
}
@inproceedings{webassembly,
author = {Haas, Andreas and Rossberg, Andreas and Schuff, Derek L. and Titzer, Ben L. and Holman, Michael and Gohman, Dan and Wagner, Luke and Zakai, Alon and Bastien, JF},
title = {Bringing the Web up to Speed with WebAssembly},
year = {2017},
isbn = {9781450349888},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3062341.3062363},
doi = {10.1145/3062341.3062363},
abstract = { The maturation of the Web platform has given rise to sophisticated and demanding Web applications such as interactive 3D visualization, audio and video software, and games. With that, efficiency and security of code on the Web has become more important than ever. Yet JavaScript as the only built-in language of the Web is not well-equipped to meet these requirements, especially as a compilation target. Engineers from the four major browser vendors have risen to the challenge and collaboratively designed a portable low-level bytecode called WebAssembly. It offers compact representation, efficient validation and compilation, and safe low to no-overhead execution. Rather than committing to a specific programming model, WebAssembly is an abstraction over modern hardware, making it language-, hardware-, and platform-independent, with use cases beyond just the Web. WebAssembly has been designed with a formal semantics from the start. We describe the motivation, design and formal semantics of WebAssembly and provide some preliminary experience with implementations. },
booktitle = {Proceedings of the 38th ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {185–200},
numpages = {16},
keywords = {just-in-time compilers, programming languages, type systems, virtual machines, assembly languages},
location = {Barcelona, Spain},
series = {PLDI 2017}
}
@inproceedings{marlow2009runtime,
author = {Marlow, Simon and Peyton Jones, Simon and Singh, Satnam},
title = {Runtime Support for Multicore Haskell},
year = {2009},
isbn = {9781605583327},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1596550.1596563},
doi = {10.1145/1596550.1596563},
booktitle = {Proceedings of the 14th ACM SIGPLAN International Conference on Functional Programming},
pages = {65–78},
numpages = {14},
keywords = {Haskell parallel runtime},
location = {Edinburgh, Scotland},
series = {ICFP '09}
}

@inproceedings{seqnomore,
author = {Marlow, Simon and Maier, Patrick and Loidl, Hans-Wolfgang and Aswad, Mustafa K. and Trinder, Phil},
title = {Seq No More: Better Strategies for Parallel Haskell},
year = {2010},
isbn = {9781450302524},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1863523.1863535},
doi = {10.1145/1863523.1863535},
booktitle = {Proceedings of the Third ACM Haskell Symposium on Haskell},
pages = {91–102},
numpages = {12},
keywords = {parallel functional programming, strategies},
location = {Baltimore, Maryland, USA},
series = {Haskell '10}
}


@PhDThesis{	  spoonhower:phd,
  author	= "Daniel Spoonhower",
  title		= "Scheduling Deterministic Parallel Programs",
  school	= "Carnegie Mellon University",
  department	= "Computer Science",
  address	= "Pittsburgh, PA, USA",
  year		= "2009"
}

@inproceedings{manticore,
author = {Reppy, John and Russo, Claudio V. and Xiao, Yingqi},
title = {Parallel Concurrent ML},
year = {2009},
isbn = {9781605583327},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1596550.1596588},
doi = {10.1145/1596550.1596588},
booktitle = {Proceedings of the 14th ACM SIGPLAN International Conference on Functional Programming},
pages = {257–268},
numpages = {12},
keywords = {message passing, parallelism, concurrency},
location = {Edinburgh, Scotland},
series = {ICFP '09}
}

@inproceedings{acar-hierarchy,
author = {Raghunathan, Ram and Muller, Stefan K. and Acar, Umut A. and Blelloch, Guy},
title = {Hierarchical Memory Management for Parallel Programs},
year = {2016},
isbn = {9781450342193},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2951913.2951935},
doi = {10.1145/2951913.2951935},
booktitle = {Proceedings of the 21st ACM SIGPLAN International Conference on Functional Programming},
pages = {392–406},
numpages = {15},
keywords = {Parallelism, Scheduling, Languages, Memory Management},
location = {Nara, Japan},
series = {ICFP 2016}
}
@misc{MLton,
key = "MLton",
title = "{MLton}, a whole program optimizing compiler for {Standard ML}",
note = "{\tt http://www.mlton.org/}"
}

@book{StandardML,
author = {Milner, Robin and Tofte, Mads and Macqueen, David},
title = {The  Definition of Standard ML},
year = {1997},
isbn = {0262631814},
publisher = {MIT Press},
address = {Cambridge, MA, USA}
}

@techreport{lenient-eval-traub,
  title={Sequential implementation of lenient programming languages},
  author={Traub, Kenneth R},
  year={1988},
  institution={MASSACHUSETTS INST OF TECH CAMBRIDGE LAB FOR COMPUTER SCIENCE}
}

@article{lineant-eval-parallel,
author = {Tremblay, G. and Malenfant, B.},
title = {Lenient Evaluation and Parallelism},
year = {2000},
issue_date = {April 2000},
publisher = {Pergamon Press, Inc.},
address = {USA},
volume = {26},
number = {1},
issn = {0096-0551},
url = {https://doi.org/10.1016/S0096-0551(01)00007-8},
doi = {10.1016/S0096-0551(01)00007-8},
journal = {Comput. Lang.},
month = apr,
pages = {27-41},
numpages = {15},
keywords = {π-calculus, Lazy functional programming languages, Implicit parallelism, Non-strict evaluation}
}



@inproceedings{lazy-par-tremblay,
    author = {G. Tremblay and G. R. Gao},
    title = {The Impact of Laziness on Parallelism and the Limits of Strictness Analysis},
    booktitle = {PROCEEDINGS HIGH PERFORMANCE FUNCTIONAL COMPUTING},
    year = {1995},
    pages = {119--133},
    publisher = {}
}

@InProceedings{concurrent-revisions-oopsla10,
author = {Burckhardt, Sebastian and Baldassion, Alexandro and Leijen, Daan},
title = {Concurrent Programming with Revisions and Isolation Types},
booktitle = {Proceedings of the ACM International Conference on Object Oriented Programming Systems Languages and Applications (OOPSLA'10)},
year = {2010},
month = {October},
abstract = {Building applications that are responsive and can exploit parallel hardware while remaining simple to write, understand, test, and maintain, poses an important challenge for developers. In particular, it is often desirable to enable various tasks to read or modify shared data concurrently without requiring complicated locking schemes that may throttle concurrency and introduce bugs. We introduce a mechanism that simplifies the use of concurrent heterogeneous tasks. Programmers declare what data they wish to share between tasks by using isolation types, and execute tasks concurrently by forking and joining revisions. These revisions are isolated: they read and modify their own private copy of the shared data only. A runtime creates and merges copies automatically, and resolves conflicts deterministically, in a manner declared by the chosen isolation type. To demonstrate the practical viability of our approach, we developed an efficient algorithm and an implementation in the form of a C# library, and used it to parallelize an interactive game application. Our results show that the parallelized game, while simple and very similar to the original sequential game, achieves satisfactory speedups on a multicore processor.},
publisher = {ACM SIGPLAN},
url = {https://www.microsoft.com/en-us/research/publication/concurrent-programming-with-revisions-and-isolation-types/},
edition = {Proceedings of the ACM International Conference on Object Oriented Programming Systems Languages and Applications (OOPSLA'10)},
}


@inproceedings{hierarchical-heaps-mutation,
author = {Guatto, Adrien and Westrick, Sam and Raghunathan, Ram and Acar, Umut and Fluet, Matthew},
title = {Hierarchical Memory Management for Mutable State},
year = {2018},
isbn = {9781450349826},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3178487.3178494},
doi = {10.1145/3178487.3178494},
booktitle = {Proceedings of the 23rd ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming},
pages = {81-93},
numpages = {13},
keywords = {hierarchical heaps, parallel functional language implementation, promotion, mutation, garbage collection},
location = {Vienna, Austria},
series = {PPoPP '18}
}

@article{kdtree,
author = {Friedman, Jerome H. and Bentley, Jon Louis and Finkel, Raphael Ari},
title = {An Algorithm for Finding Best Matches in Logarithmic Expected Time},
year = {1977},
issue_date = {September 1977},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {3},
number = {3},
issn = {0098-3500},
url = {https://doi.org/10.1145/355744.355745},
doi = {10.1145/355744.355745},
journal = {ACM Trans. Math. Softw.},
month = sep,
pages = {209-226},
numpages = {18}
}

@inproceedings{pbbs,
author = {Shun, Julian and Blelloch, Guy E. and Fineman, Jeremy T. and Gibbons, Phillip B. and Kyrola, Aapo and Simhadri, Harsha Vardhan and Tangwongsan, Kanat},
title = {Brief Announcement: The Problem Based Benchmark Suite},
year = {2012},
isbn = {9781450312134},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2312005.2312018},
doi = {10.1145/2312005.2312018},
booktitle = {Proceedings of the Twenty-Fourth Annual ACM Symposium on Parallelism in Algorithms and Architectures},
pages = {68-70},
numpages = {3},
keywords = {benchmarking, algorithm performance, parallel algorithms},
location = {Pittsburgh, Pennsylvania, USA},
series = {SPAA '12}
}


@article{Heartbeat_17,
  author={Acar, Umut A and Chargu{\'e}raud, Arthur and and Guatto, Adrien and Rainey, Mike and Sieczkowski, Filip},
  title={Heartbeat Scheduling: Provable Efficiency for Nested Parallelism},
  booktitle={39th {ACM} {SIGPLAN} Conference on Programming Language Design and Implementation},
  year={2018},
  organization={ACM},
  url={http://mike-rainey.site/papers/heartbeat.pdf}
}

@inproceedings{OracleGuided_19,
 author = {Acar, Umut A. and Aksenov, Vitaly and Chargu{\'e}raud, Arthur and Rainey, Mike},
 title = {Provably and Practically Efficient Granularity Control},
 booktitle = {Proceedings of the 24th Symposium on Principles and Practice of Parallel Programming},
 series = {PPoPP '19},
 year = {2019},
 isbn = {978-1-4503-6225-2},
 location = {Washington, District of Columbia},
 pages = {214--228},
 numpages = {15},
 url = {http://mike-rainey.site/papers/oracle-ppop19-long.pdf},
 acmid = {3295725},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {granularity control, parallel programming languages},
}
@inproceedings{goldfarb13sc,
  author =        {Goldfarb, Michael and Jo, Youngjoon and
                   Kulkarni, Milind},
  booktitle =     {Proceedings of the International Conference on High
                   Performance Computing, Networking, Storage and
                   Analysis (Supercomputing)},
  series =        {SC '13},
  title =         {General transformations for GPU execution of tree
                   traversals},
  year =          {2013},
}
@article{MPL,
author = {Westrick, Sam and Yadav, Rohan and Fluet, Matthew and Acar, Umut A.},
title = {Disentanglement in Nested-Parallel Programs},
year = {2019},
issue_date = {January 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {POPL},
url = {https://doi.org/10.1145/3371115},
doi = {10.1145/3371115},
journal = {Proc. ACM Program. Lang.},
month = dec,
articleno = {47},
numpages = {32},
keywords = {memory management, disentanglement, functional programming, parallel computing, data race}
}

@article{monad-par,
author = {Marlow, Simon and Newton, Ryan and Peyton Jones, Simon},
title = {A Monad for Deterministic Parallelism},
year = {2011},
issue_date = {December 2011},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {46},
number = {12},
issn = {0362-1340},
url = {https://doi.org/10.1145/2096148.2034685},
doi = {10.1145/2096148.2034685},
journal = {SIGPLAN Not.},
month = sep,
pages = {71-82},
numpages = {12},
keywords = {parallel, haskell}
}
@inproceedings{ueno2016fully,
  title={A fully concurrent garbage collector for functional programs on multicore processors},
  author={Ueno, Katsuhiro and Ohori, Atsushi},
  booktitle={Proceedings of the 21st ACM SIGPLAN International Conference on Functional Programming},
  pages={421--433},
  year={2016}
}

@article{sivaramakrishnan2020retrofitting,
  title={Retrofitting Parallelism onto OCaml},
  author={Sivaramakrishnan, KC and Dolan, Stephen and White, Leo and Jaffer, Sadiq and Kelly, Tom and Sahoo, Anmol and Parimala, Sudha and Dhiman, Atul and Madhavapeddy, Anil},
  journal={arXiv preprint arXiv:2004.11663},
  year={2020}
}

@article{IStructures,
 author = {Arvind and Nikhil, Rishiyur S. and Pingali, Keshav K.},
 title = {I-structures: {D}ata structures for parallel computing},
 journal = {ACM Trans. Program. Lang. Syst.},
 issue_date = {Oct. 1989},
 volume = {11},
 issue = {4},
 month = {October},
 year = {1989},
 issn = {0164-0925},
 pages = {598--632},
 numpages = {35},
 url = {http://doi.acm.org/10.1145/69558.69562},
 doi = {http://doi.acm.org/10.1145/69558.69562},
 acmid = {69562},
 publisher = {ACM},
 address = {New York, NY, USA},
}

@inproceedings{urweb-icfp,
 author = {Chlipala, Adam},
 title = {An Optimizing Compiler for a Purely Functional Web-application Language},
 booktitle = {Proceedings of the 20th ACM SIGPLAN International Conference on Functional Programming},
 series = {ICFP 2015},
 year = {2015},
 isbn = {978-1-4503-3669-7},
 location = {Vancouver, BC, Canada},
 pages = {10--21},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2784731.2784741},
 doi = {10.1145/2784731.2784741},
 acmid = {2784741},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Web programming languages, pure functional programming, whole-program optimization},
}
@article{OCaml,
  title={The OCaml system release},
  author={Leroy, Xavier and Doligez, Damien and Frisch, Alain and Garrigue, Jacques and Rémy, Didier and Vouillon, Jérôme},
  year = {2020},
  month = {Feb},
  url={https://ocaml.org/releases/4.10/htmlman/index.html}
}

@inproceedings{multicore-ocaml,
author = {Sivaramakrishnan, KC and Dolan, Stephen and White, Leo and Jaffer, Sadiq and Kelly, Tom and Sahoo, Anmol and Parimala, Sudha and Dhiman, Atul and Madhavapeddy, Anil},
title = {Retrofitting Parallelism onto OCaml},
year = {2020},
issue_date = {August 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {ICFP},
url = {https://doi.org/10.1145/3408995},
doi = {10.1145/3408995},
journal = {Proc. ACM Program. Lang.},
month = aug,
articleno = {113},
numpages = {30},
keywords = {concurrent garbage collection, backwards compatibility}
}
